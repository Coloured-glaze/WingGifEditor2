name: Build and Package WingGifEditor2

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Operating System'
        required: true
        type: choice
        options:
          - windows-latest
          - ubuntu-latest
        default: 'windows-latest'
      qt_version:
        description: 'Qt Version'
        required: true
        type: choice
        options:
          - 5.15.2
          - 6.6.2
        default: '6.6.2'
      arch:
        description: 'Architecture'
        required: true
        type: choice
        options:
          - win64_msvc2019_64
          - gcc_64
        default: 'win64_msvc2019_64'

permissions:
  contents: write
  
env:
  BUILD_TYPE: Release

jobs:
  build-and-package:
    runs-on: ${{ inputs.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7
      with:
        submodules: recursive
        fetch-depth: 0
        fetch-tags: true
        
    - name: Check Python version
      run: |
        python --version
        pip -V

    - name: Validate inputs
      run: |
        if [[ "${{ inputs.os }}" == "windows-latest" && "${{ inputs.arch }}" == "gcc_64" ]]; then
          echo "Invalid combination: windows-latest cannot use gcc_64"
          exit 1
        fi
        if [[ "${{ inputs.os }}" == "ubuntu-latest" && "${{ inputs.arch }}" == "win64_msvc2019_64" ]]; then
          echo "Invalid combination: ubuntu-latest cannot use win64_msvc2019_64"
          exit 1
        fi
      shell: bash
        
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ inputs.qt_version }}
        host: ${{ inputs.os == 'windows-latest' && 'windows' || 'linux' }}
        target: 'desktop'
        arch: ${{ inputs.arch }}
        cache: true
        tools: 'tools_cmake'

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel

    - name: Install
      run: |
        echo "Current directory: $(pwd)"
        echo "Build directory contents:"
        python -c "
        import os
        workspace = os.environ.get('GITHUB_WORKSPACE', '${{github.workspace}}')
        build_path = os.path.join(workspace, 'build')
        print('Listing contents of:', build_path)
        if os.path.exists(build_path):
            for item in os.listdir(build_path):
                print(item)
        else:
            print('Build directory does not exist')
        "
        echo "Installing to: ${{github.workspace}}/install"
        # 使用Python创建安装目录并执行CMake安装
        python -c "
        import os
        import subprocess
        workspace = os.environ.get('GITHUB_WORKSPACE', '${{github.workspace}}')
        build_path = os.path.join(workspace, 'build')
        install_path = os.path.join(workspace, 'install')
        os.makedirs(install_path, exist_ok=True)
        print('Created install directory:', install_path)
        
        # 执行CMake安装
        cmake_install_cmd = [
            'cmake',
            '--install',
            build_path,
            '--config',
            '${{env.BUILD_TYPE}}',
            '--prefix',
            install_path
        ]
        print('Executing:', ' '.join(cmake_install_cmd))
        result = subprocess.run(cmake_install_cmd, capture_output=True, text=True)
        print('CMake install stdout:', result.stdout)
        if result.stderr:
            print('CMake install stderr:', result.stderr)
        if result.returncode != 0:
            print('CMake install failed with return code:', result.returncode)
            exit(result.returncode)
        else:
            print('CMake install completed successfully')
        "
      shell: bash

    - name: List installed files
      run: |
        echo "Listing files in install directory:"
        python -c "
        import os
        install_path = '${{github.workspace}}/install'
        for root, dirs, files in os.walk(install_path):
            level = root.replace(install_path, '').count(os.sep)
            indent = ' ' * 2 * level
            print('{}{}/'.format(indent, os.path.basename(root)))
            subindent = ' ' * 2 * (level + 1)
            for file in files:
                print('{}{}'.format(subindent, file))
        "
      shell: bash
  
    - uses: actions/upload-artifact@v4
      with:
        name: WingGifEditor2-${{ inputs.os == 'windows-latest' && 'windows' || 'linux' }}-${{ inputs.qt_version }}-build-cache
        # 自动压缩为zip
        path: ${{github.workspace}}/install
